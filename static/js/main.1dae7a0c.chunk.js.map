{"version":3,"sources":["components/Navbar.tsx","pages/HomePage/HomePage.tsx","api.ts","utils/searchHelper.ts","components/SearchLink.tsx","components/PeopleFilters.tsx","components/Loader/Loader.tsx","components/PersoneLink/PersoneLink.tsx","components/SortLink.tsx","types/SortParams.tsx","components/PeopleTable.tsx","components/ErrorLoad.tsx","pages/PeoplePage/PeoplePage.tsx","components/NotFound.tsx","App.tsx","index.tsx"],"names":["Navbar","useSearchParams","currrentSearchParams","toString","className","role","to","isActive","cn","pathname","search","HomePage","API_URL","wait","delay","Promise","resolve","setTimeout","getPeople","then","fetch","response","json","getSearchWith","currentParams","paramsToUpdate","newParams","URLSearchParams","Object","entries","forEach","key","value","delete","Array","isArray","part","append","set","SearchLink","children","params","props","searchParams","currentCenturies","getAll","centuries","includes","filter","elem","length","push","PeopleFilters","navigate","useNavigate","currentCentury","currentSex","get","currentQuery","sex","type","placeholder","onChange","event","newQuery","query","target","Loader","PersoneLink","person","slug","name","SortLink","currentSortParam","currentOrder","sort","order","classNames","SortsParams","PeopleTable","people","useParams","currentSort","peopleToRender","newPeople","Name","Sex","a","b","toLocaleLowerCase","localeCompare","Born","Died","fatherName","motherName","String","Math","ceil","born","preparedPeople","keys","map","died","find","per","mother","father","ErrorLoad","PeoplePage","useState","setPeople","isLoading","setIsLoading","isError","setIsError","getDataFromServer","peopleFromServer","personWithParents","parent","useEffect","NotFoundPage","App","path","element","replace","index","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.1dae7a0c.chunk.js","sourcesContent":["import { NavLink, useSearchParams } from 'react-router-dom';\nimport cn from 'classnames';\n\nexport const Navbar = () => {\n  const [searchParams] = useSearchParams();\n\n  const currrentSearchParams = searchParams.toString();\n\n  return (\n    <nav\n      data-cy=\"nav\"\n      className=\"navbar is-fixed-top has-shadow\"\n      role=\"navigation\"\n      aria-label=\"main navigation\"\n    >\n      <div className=\"container\">\n        <div className=\"navbar-brand\">\n          <NavLink\n            to=\"/\"\n            className={({ isActive }) => cn('navbar-item', {\n              'has-background-grey-lighter': isActive,\n            })}\n          >\n            Home\n          </NavLink>\n\n          <NavLink\n            to={{\n              pathname: '/people',\n              search: currrentSearchParams,\n            }}\n            className={({ isActive }) => cn('navbar-item', {\n              'has-background-grey-lighter': isActive,\n            })}\n          >\n            People\n          </NavLink>\n        </div>\n      </div>\n    </nav>\n  );\n};\n","export const HomePage = () => {\n  return (\n    <h1 className=\"title\">Home Page</h1>\n  );\n};\n","import { Person } from './types/Person';\n\n// eslint-disable-next-line max-len\nconst API_URL = 'https://mate-academy.github.io/react_people-table/api/people.json';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => setTimeout(resolve, delay));\n}\n\nexport async function getPeople(): Promise<Person[]> {\n  // keep this delay for testing purpose\n  return wait(500)\n    .then(() => fetch(API_URL))\n    .then(response => response.json());\n}\n","export type SearchParams = {\n  [key: string]: string | string[] | null,\n};\n\n/**\n * This function prepares a correct search string\n * from a given currentParams and paramsToUpdate.\n */\nexport function getSearchWith(\n  currentParams: URLSearchParams,\n  paramsToUpdate: SearchParams, // it's our custom type\n): string {\n  // copy currentParams by creating new object from a string\n  const newParams = new URLSearchParams(\n    currentParams.toString(),\n  );\n\n  // Here is the example of paramsToUpdate\n  // {\n  //   sex: 'm',                ['sex', 'm']\n  //   order: null,             ['order', null]\n  //   centuries: ['16', '19'], ['centuries', ['16', '19']]\n  // }\n  //\n  // - params with the `null` value are deleted;\n  // - string value is set to given param key;\n  // - array of strings adds several params with the same key;\n\n  Object.entries(paramsToUpdate)\n    .forEach(([key, value]) => {\n      if (value === null) {\n        newParams.delete(key);\n      } else if (Array.isArray(value)) {\n        // we delete the key to remove old values\n        newParams.delete(key);\n\n        value.forEach(part => {\n          newParams.append(key, part);\n        });\n      } else {\n        newParams.set(key, value);\n      }\n    });\n\n  // we return a string to use it inside links\n  return newParams.toString();\n}\n","import { Link, LinkProps, useSearchParams } from 'react-router-dom';\nimport { getSearchWith, SearchParams } from '../utils/searchHelper';\n\n/**\n * To replace the the standard `Link` we take all it props except for `to`\n * along with the custom `params` prop that we use for updating the search\n */\ntype Props = Omit<LinkProps, 'to'> & {\n  params: SearchParams,\n};\n\n/**\n * SearchLink updates the given `params` in the search keeping the `pathname`\n * and the other existing search params (see `getSearchWith`)\n */\nexport const SearchLink: React.FC<Props> = ({\n  children, // this is the content between the open and closing tags\n  params, // the params to be updated in the `search`\n  ...props // all usual Link props like `className`, `style` and `id`\n}) => {\n  const [searchParams] = useSearchParams();\n  let currentCenturies = searchParams.getAll('centuries');\n\n  const newParams = params;\n\n  if (newParams.centuries\n      && typeof newParams.centuries === 'string') {\n    if (currentCenturies.includes(newParams.centuries)) {\n      currentCenturies = currentCenturies\n        .filter(elem => elem !== newParams.centuries);\n\n      newParams.centuries = currentCenturies.length ? currentCenturies : null;\n    } else {\n      currentCenturies.push(newParams.centuries);\n      newParams.centuries = currentCenturies;\n    }\n  }\n\n  return (\n    <Link\n      to={{\n        search: getSearchWith(searchParams, params),\n      }}\n      {...props} // copy all the other props\n    >\n      {children}\n    </Link>\n  );\n};\n","import { useNavigate, useSearchParams } from 'react-router-dom';\nimport cn from 'classnames';\nimport { SearchLink } from './SearchLink';\nimport { getSearchWith } from '../utils/searchHelper';\n\nexport const PeopleFilters = () => {\n  const navigate = useNavigate();\n  const [\n    searchParams,\n  ] = useSearchParams();\n\n  const onSetQuery = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const newQuery = {\n      query: event.target.value || null,\n    };\n\n    navigate({ search: getSearchWith(searchParams, newQuery) });\n  };\n\n  const currentCentury = searchParams.getAll('centuries');\n  const currentSex = searchParams.get('sex');\n  const currentQuery = searchParams.get('query');\n\n  return (\n    <nav className=\"panel\">\n      <p className=\"panel-heading\">Filters</p>\n\n      <p className=\"panel-tabs\" data-cy=\"SexFilter\">\n        <SearchLink\n          params={{ sex: null }}\n          className={cn(\n            { 'is-active': currentSex === null },\n          )}\n        >\n          All\n        </SearchLink>\n\n        <SearchLink\n          params={{ sex: 'm' }}\n          className={cn(\n            { 'is-active': currentSex === 'm' },\n          )}\n        >\n          Male\n        </SearchLink>\n\n        <SearchLink\n          params={{ sex: 'f' }}\n          className={cn(\n            { 'is-active': currentSex === 'f' },\n          )}\n        >\n          Female\n        </SearchLink>\n      </p>\n\n      <div className=\"panel-block\">\n        <p className=\"control has-icons-left\">\n          <input\n            value={currentQuery || ''}\n            data-cy=\"NameFilter\"\n            type=\"search\"\n            className=\"input\"\n            placeholder=\"Search\"\n            onChange={onSetQuery}\n          />\n\n          <span className=\"icon is-left\">\n            <i className=\"fas fa-search\" aria-hidden=\"true\" />\n          </span>\n        </p>\n      </div>\n\n      <div className=\"panel-block\">\n        <div className=\"level is-flex-grow-1 is-mobile\" data-cy=\"CenturyFilter\">\n          <div className=\"level-left\">\n            <SearchLink\n              params={{ centuries: '16' }}\n              data-cy=\"century\"\n              className={cn(\n                'button mr-1',\n                { 'is-info': currentCentury.includes('16') },\n              )}\n            >\n              16\n            </SearchLink>\n\n            <SearchLink\n              params={{ centuries: '17' }}\n              data-cy=\"century\"\n              className={cn(\n                'button mr-1',\n                { 'is-info': currentCentury.includes('17') },\n              )}\n            >\n              17\n            </SearchLink>\n\n            <SearchLink\n              params={{ centuries: '18' }}\n              data-cy=\"century\"\n              className={cn(\n                'button mr-1',\n                { 'is-info': currentCentury.includes('18') },\n              )}\n            >\n              18\n            </SearchLink>\n\n            <SearchLink\n              params={{ centuries: '19' }}\n              data-cy=\"century\"\n              className={cn(\n                'button mr-1',\n                { 'is-info': currentCentury.includes('19') },\n              )}\n            >\n              19\n            </SearchLink>\n\n            <SearchLink\n              params={{ centuries: '20' }}\n              data-cy=\"century\"\n              className={cn(\n                'button mr-1',\n                { 'is-info': currentCentury.includes('20') },\n              )}\n            >\n              20\n            </SearchLink>\n          </div>\n\n          <div className=\"level-right ml-4\">\n            <SearchLink\n              params={{ centuries: null }}\n              data-cy=\"centuryALL\"\n              className={cn(\n                'button is-success',\n                { 'is-outlined': currentCentury.length },\n              )}\n            >\n              All\n            </SearchLink>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"panel-block\">\n        <SearchLink\n          params={{\n            centuries: null,\n            query: null,\n            sex: null,\n          }}\n          className=\"button is-link is-outlined is-fullwidth\"\n        >\n          Reset all filters\n        </SearchLink>\n      </div>\n    </nav>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport cn from 'classnames';\nimport { Person } from '../../types';\n\ntype Props = {\n  person?: Person;\n};\n\nexport const PersoneLink: React.FC<Props> = ({ person }) => {\n  return (\n    <Link\n      className={cn(\n        { 'has-text-danger': person?.sex === 'f' },\n      )}\n      to={`/people/${person?.slug}`}\n    >\n      {person?.name}\n    </Link>\n  );\n};\n","import classNames from 'classnames';\nimport { Link, LinkProps, useSearchParams } from 'react-router-dom';\nimport { getSearchWith, SearchParams } from '../utils/searchHelper';\n\n/**\n * To replace the the standard `Link` we take all it props except for `to`\n * along with the custom `params` prop that we use for updating the search\n */\ntype Props = Omit<LinkProps, 'to'> & {\n  params: string,\n};\n\n/**\n * SearchLink updates the given `params` in the search keeping the `pathname`\n * and the other existing search params (see `getSearchWith`)\n */\nexport const SortLink: React.FC<Props> = ({\n  children, // this is the content between the open and closing tags\n  params, // the params to be updated in the `search`\n  ...props // all usual Link props like `className`, `style` and `id`\n}) => {\n  const [searchParams] = useSearchParams();\n\n  const newParams: SearchParams = {};\n\n  const currentSortParam = searchParams.get('sort');\n  const currentOrder = searchParams.get('order');\n\n  if (params !== currentSortParam) {\n    newParams.sort = params;\n  }\n\n  if (params === currentSortParam\n    && currentOrder === null) {\n    newParams.order = 'desc';\n  }\n\n  if (currentSortParam === params && currentOrder) {\n    newParams.order = null;\n    newParams.sort = null;\n  }\n\n  if (currentSortParam !== params && currentOrder) {\n    newParams.order = null;\n    newParams.sort = params;\n  }\n\n  return (\n    <th>\n      <span className=\"is-flex is-flex-wrap-nowrap\">\n        {children}\n        <Link\n          to={{\n            search: getSearchWith(searchParams, newParams),\n          }}\n          {...props} // copy all the other props\n        >\n          <span className=\"icon\">\n            <i className={classNames(\n              'fas',\n              { 'fa-sort': currentSortParam !== params },\n              { 'fa-sort-up': currentSortParam === params && !currentOrder },\n              { 'fa-sort-down': currentSortParam === params && currentOrder },\n            )}\n            />\n          </span>\n        </Link>\n      </span>\n    </th>\n  );\n};\n","export enum SortsParams {\n  Name = 'name',\n  Sex = 'sex',\n  Born = 'born',\n  Died = 'died',\n}\n","import React from 'react';\nimport cn from 'classnames';\nimport { useParams, useSearchParams } from 'react-router-dom';\nimport { PersoneLink } from './PersoneLink';\nimport { Person } from '../types';\nimport { SortLink } from './SortLink';\nimport { SortsParams } from '../types/SortParams';\n\ntype Params = {\n  people: Person[]\n};\n\nexport const PeopleTable: React.FC<Params> = ({ people }) => {\n  const { slug } = useParams();\n  const [searchParams] = useSearchParams();\n\n  const currentSort = searchParams.get('sort');\n  const currentOrder = searchParams.get('order');\n  const currentCenturies = searchParams.getAll('centuries');\n  const currentSex = searchParams.get('sex');\n  const currentQuery = searchParams.get('query');\n\n  const preparedPeople = () => {\n    let newPeople = [...people];\n    const order = currentOrder ? -1 : 1;\n\n    switch (currentSort) {\n      case SortsParams.Name:\n      case SortsParams.Sex:\n        newPeople.sort((a, b) => {\n          return a[currentSort].toLocaleLowerCase()\n            .localeCompare(b[currentSort].toLocaleLowerCase()) * order;\n        });\n\n        break;\n\n      case SortsParams.Born:\n      case SortsParams.Died:\n        newPeople.sort((a, b) => (a[currentSort] - b[currentSort]) * order);\n\n        break;\n\n      default:\n        break;\n    }\n\n    if (currentSex) {\n      newPeople = newPeople.filter(person => person.sex === currentSex);\n    }\n\n    if (currentQuery) {\n      newPeople = newPeople.filter((person) => {\n        if (person.name.includes(currentQuery)\n          || person.fatherName?.includes(currentQuery)\n          || person.motherName?.includes(currentQuery)\n        ) {\n          return true;\n        }\n\n        return false;\n      });\n    }\n\n    if (currentCenturies.length > 0) {\n      newPeople = newPeople\n        .filter(person => currentCenturies\n          .includes(String(Math.ceil(person.born / 100))));\n    }\n\n    return newPeople;\n  };\n\n  const peopleToRender = preparedPeople();\n\n  return (\n    <table\n      data-cy=\"peopleTable\"\n      className=\"table is-striped is-hoverable is-narrow is-fullwidth\"\n    >\n      <thead>\n        <tr>\n          {(Object.keys(SortsParams) as Array<keyof typeof SortsParams>)\n            .map(key => (\n              <SortLink\n                key={key}\n                params={SortsParams[key]}\n              >\n                {key}\n              </SortLink>\n            ))}\n\n          <th>Mother</th>\n          <th>Father</th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {peopleToRender.map(person => {\n          const mother = () => {\n            if (!person.motherName) {\n              return '-';\n            }\n\n            return people\n              .find(per => per.motherName === person.mother?.name)\n              ? <PersoneLink person={person.mother} />\n              : person.motherName;\n          };\n\n          const father = () => {\n            if (!person.fatherName) {\n              return '-';\n            }\n\n            return people\n              .find(per => per.fatherName === person.father?.name)\n              ? <PersoneLink person={person.father} />\n              : person.fatherName;\n          };\n\n          return (\n            <tr\n              key={person.slug}\n              className={cn(\n                { 'has-background-warning': person.slug === slug },\n              )}\n              data-cy=\"person\"\n            >\n              <td>\n                <PersoneLink person={person} />\n              </td>\n\n              <td>{person.sex}</td>\n\n              <td>{person.born}</td>\n\n              <td>{person.died}</td>\n\n              <td>{mother()}</td>\n\n              <td>{father()}</td>\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n};\n","export const ErrorLoad = () => {\n  return (\n    <p data-cy=\"peopleLoadingError\" className=\"has-text-danger\">\n      Something went wrong\n    </p>\n  );\n};\n","import { useEffect, useState } from 'react';\nimport { getPeople } from '../../api';\nimport { PeopleFilters } from '../../components/PeopleFilters';\nimport { Loader } from '../../components/Loader';\nimport { Person } from '../../types';\nimport { PeopleTable } from '../../components/PeopleTable';\nimport { ErrorLoad } from '../../components/ErrorLoad';\n\nexport const PeoplePage = () => {\n  const [people, setPeople] = useState<Person[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [isError, setIsError] = useState(false);\n\n  const getDataFromServer = async () => {\n    setIsLoading(true);\n    setIsError(false);\n\n    try {\n      const peopleFromServer = await getPeople();\n\n      const personWithParents = peopleFromServer\n        .map(person => {\n          const mother = peopleFromServer\n            .find(parent => parent.name === person.motherName);\n          const father = peopleFromServer\n            .find(parent => parent.name === person.fatherName);\n\n          return {\n            ...person,\n            mother,\n            father,\n          };\n        });\n\n      setPeople(personWithParents);\n    } catch (error) {\n      setIsError(true);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    getDataFromServer();\n  }, []);\n\n  const content = () => {\n    if (isLoading) {\n      return <Loader />;\n    }\n\n    if (isError) {\n      return <ErrorLoad />;\n    }\n\n    if (!people.length && !isLoading) {\n      return (\n        <p data-cy=\"noPeopleMessage\">\n          There are no people on the server\n        </p>\n      );\n    }\n\n    return (\n      <PeopleTable people={people} />\n    );\n  };\n\n  return (\n    <>\n      <h1 className=\"title\">People Page</h1>\n\n      <div className=\"block\">\n        <div className=\"columns is-desktop is-flex-direction-row-reverse\">\n          <div className=\"column is-7-tablet is-narrow-desktop\">\n            {people.length !== 0 && <PeopleFilters />}\n          </div>\n\n          <div className=\"column\">\n            <div className=\"box table-container\">\n              {content()}\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n","export const NotFoundPage = () => {\n  return (\n    <h1 className=\"title\">Page not found</h1>\n  );\n};\n","import { Navigate, Route, Routes } from 'react-router-dom';\nimport { Navbar } from './components/Navbar';\n\nimport './App.scss';\nimport { HomePage } from './pages/HomePage';\nimport { PeoplePage } from './pages/PeoplePage';\nimport { NotFoundPage } from './components/NotFound';\n\nexport const App = () => {\n  return (\n    <div data-cy=\"app\">\n      <Navbar />\n\n      <div className=\"section\">\n        <div className=\"container\">\n          <Routes>\n            <Route path=\"/\" element={<HomePage />} />\n            <Route path=\"/home\" element={<Navigate to=\"/\" replace />} />\n\n            <Route path=\"people\">\n              <Route index element={<PeoplePage />} />\n              <Route path=\":slug\" element={<PeoplePage />} />\n            </Route>\n\n            <Route\n              path=\"*\"\n              element={<NotFoundPage />}\n            />\n          </Routes>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import { createRoot } from 'react-dom/client';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { App } from './App';\n\ncreateRoot(document.getElementById('root') as HTMLDivElement)\n  .render(\n    <Router>\n      <App />\n    </Router>,\n  );\n"],"sourceRoot":""}